Ok, all the environment is now working with Karen set up on Linux, and JVM v 6 up and working!!

Lesson 3:

Now, he tells me they're not going to use Karel throughout the whole class!!! Well, whatever, it was still a worth-while exercise.

Step-wise refinement, decomposition, top-down vs bottom-up design.

	- Takes ~100 hours of programming to start thinking in terms of top-down design principles as opposed to bottom-up ones. Generally, top-down design is preferable, as it builds naturally from abstractions that we (as humans) think in towards instructions that the computer can execute.

	- What an excellent class - my solution to the exercise to fix the city was done using a top-down design process.

	- Good style, in terms of the practice of 'software engineering' is more important than just getting the program working.

How does decomposition work? What are the proper ways to decompose a program?

	- Each 'method' should solve one problem for you.
	- Most methods are ~ 1-15 lines long; a one-line method is likely just re-naming something - helps to think of the method in the correct terms.
	- Use good names.
	- Use good comments, and at least one comment per method.
	- One really good type of comment that was covered without real detail in the lecture is putting pre and post conditions in the comments that are associated with methods. For instance, a 'before' and 'after' condition that relates to when the method was called/executed.

Lesson 5:

Not too much new stuff; covered variables and declaring classes, making objects, passing messages to objects, etc.
The one really new piece of information was about the '%' operator in java, which he called the remainder operator, which makes sense, but then made a very specific point about how it is different than the operation in mathematics known as modulo operator, which I find confusing, because I thought that's precisely what it was...maybe this will be clarified in the future.

Lesson 6:

	- Reading numbers
	- Operators, casting, assignment, shorthand assignment
	- constants identified by "private static final type" (i.e. private static final double)
	- for loops in java and how they operate
	- while loops; remember these were used in Karel

Lesson 7:

	- 'for' vs. 'while' loops - they are (can be) exactly equivalent, so
	why does a programming language give you both forms? 'for' is really there to
	enable you to iterate something a known number of times, while 'while' is
	there to allow you to iterate an 'unknown' number of times.
	- Important to think of methods/functions as 'messages' that are called by
	objects; for instance, player.move(3) should be thought of as the 'player'
	object being passed a 'move(3)' message: basic structure/syntax is
	'receiver.method(argument)'. Alternatively, you are sending a message to an
	object.
