Ok, all the environment is now working with Karen set up on Linux, and JVM v 6 up and working!!

Lesson 3:

Now, he tells me they're not going to use Karel throughout the whole class!!! Well, whatever, it was still a worth-while exercise.

Step-wise refinement, decomposition, top-down vs bottom-up design.

	- Takes ~100 hours of programming to start thinking in terms of top-down design principles as opposed to bottom-up ones. Generally, top-down design is preferable, as it builds naturally from abstractions that we (as humans) think in towards instructions that the computer can execute.

	- What an excellent class - my solution to the exercise to fix the city was done using a top-down design process.

	- Good style, in terms of the practice of 'software engineering' is more important than just getting the program working.

How does decomposition work? What are the proper ways to decompose a program?

	- Each 'method' should solve one problem for you.
	- Most methods are ~ 1-15 lines long; a one-line method is likely just re-naming something - helps to think of the method in the correct terms.
	- Use good names.
	- Use good comments, and at least one comment per method.
	- One really good type of comment that was covered without real detail in the lecture is putting pre and post conditions in the comments that are associated with methods. For instance, a 'before' and 'after' condition that relates to when the method was called/executed.

Lesson 5:

Not too much new stuff; covered variables and declaring classes, making objects, passing messages to objects, etc.
The one really new piece of information was about the '%' operator in java, which he called the remainder operator, which makes sense, but then made a very specific point about how it is different than the operation in mathematics known as modulo operator, which I find confusing, because I thought that's precisely what it was...maybe this will be clarified in the future.

Lesson 6:

	- Reading numbers
	- Operators, casting, assignment, shorthand assignment
	- constants identified by "private static final type" (i.e. private static final double)
	- for loops in java and how they operate
	- while loops; remember these were used in Karel

Lesson 7:

	- 'for' vs. 'while' loops - they are (can be) exactly equivalent, so
	why does a programming language give you both forms? 'for' is really there to
	enable you to iterate something a known number of times, while 'while' is
	there to allow you to iterate an 'unknown' number of times.
	- Important to think of methods/functions as 'messages' that are called by
	objects; for instance, player.move(3) should be thought of as the 'player'
	object being passed a 'move(3)' message: basic structure/syntax is
	'receiver.method(argument)'. Alternatively, you are sending a message to an
	object.

	/////////////////////////////////////////////////////////////////////////////
		At this point, it seems like I'm fully done with the Karel program. I'll
		continue to use Eclipse, because it's a full development environment, but I
		also want to begin to incorporate some of the tools available to me in a
		program like 'atom,' and get used to one environment for programming/coding
		that will serve me across the board.
	/////////////////////////////////////////////////////////////////////////////

Lesson 8:

	- Information hiding is one of the key principles of software engineering and
	should be of primary concern to software developers. Lots of different ways
	exist to make toast: heating coils, elves, etc. The user does not, and should
	not care about the 'how'.
	- Any time a method is called, you are given a new stack-frame with a copy of
	the value of the variable that was passed to the method (pass by value). This
	is reminicent of the stacks that I looked at in the assembly language class I
	took a year ago.
	- Local variable's lifetimes are constrained to the length of time the method
	exists (is called/operating). Once it is done, they disappear. Instance
	variables, on the other hand, live for the lifetime of the object, and are
	visible to all the methods within the calling class. Used to store values
	between calls of methods...this is what is known as 'state', or the state of
	the object.
		- Class example of this was using multiple 'water bottles' with soda inside
		and calling multiple methods screwCapOn(), unscrewCap(), etc. In between all
		of the different calls of these functions, the amount of soda in the
		respective bottles did not change - which is what you want, and is the point
		of an instance variable.
		- Question from class was asked regarding what the difference between global
		and instance variables was. Mehran said there is a difference, but they are
		bad style, so they're not covered in the class.
	- Java convention asserts that constants be declared up at the top of a
	class, then all the methods, and then (at the bottom) all of the instance
	variables - which actually do change.
	- Random number generators. Use seeds to test program for bugs...this way
	when you're testing a program, it will have reproducible results.

	- 'Class' variables vs. 'instance' variables: When you define a class variable
	you use the 'static' keyword to do so. When accessing these variables, you can
	either use an actual object (th.x) or the actual class (Thing.x). The
	preferred way of doing this is by way of the 'class' variable, to make it
	explicitly clear that the variable being accessed is a property of the entire
	class, as opposed to a single instance.

Lesson 9: Creating your own classes

	- Constructors can have different sets of parameters...it's how it will know
	which of the constructors to call. They also DO NOT have return types. They
	are called, create an object, and (I think...) return a 'reference/pointer'
	to the object.
	- 'Shadowing/aliasing' happens when a parameter name is the same as an instance
	variable name - it can be corrected, however with the use of the 'this'
	object. For instance, this.counter = counter...which assigns the counter
	parameter to the instance object's instance variable called counter...a better
	way to do it is to use different names for parameters and instance variables.
	- Objects are passed BY REFERENCE!!! Meaning that the WHOLE object is passed.
	This is different from primitive types, which are passed by VALUE.

//JavaDOC//

	- JAVADOC comments begin with /**, and end with */ - have a feeling this will
	be important when documenting your own classes for later on. There are also a
	couple of other important 'tags' that will allow your comments to be transformed
	into html which will generate documentation for your classes.
		A couple of examples: @param, @result, etc.
	- Javadoc makes it nice, because you can look at a webpage vs. scrolling through
	actual program code.
	/**
	 * Sets the number of units earned
	 * @param units The number of units earned.
	 * @return name The string representation of the student's name.
	 */
	 - Notice how the parameters are included within a javadoc style comment.
	 - All classes you write (with the exception of programs) should have a toString()
	 method - because that method is included with all of your classes, since it
	 is part of the most basic 'object' in java...this is called 'overriding', I
	 think.

Lesson 10:

	- A brief review from lesson 9's classes discussion: why would it be necessary
	to have both a setter and a getter with a private instance variable? I mean if
	you give someone the ability to change it and read it, why not just make it public?
	The answer is 'encapsulation'. You don't want the implementation of a piece of
	data to matter to the user, thus, while in most cases setters and getters will
	deal with simple variables, there may be other, more complex, ways of implementing
	them which will not lend themselves very well to having a publicly available
	instance variable.
	- Overriding methods gives you the ability to define different behavior for a
	subclass using the same method name with the same signature - for instance
	toString().
	- Important point! Subclasses can no longer access the private instance variables
	of the super class. As I think about it, this makes sense, because there may be
	a lot of temp variables and other station-keeping information that a subclass
	shouldn't be able to access.
	- Some good examples using thw acm.graphics class showed me some better ways
	to solve the previous problems I was having working on the Pyramid problem. It's
	still not fully fixed, but it is better now.

Lesson 11: More on graphics; Event-driven Programming

	- Graphics (GPolygon) are built from a 'relative' starting point in your mind's
	eye.
	- Event-driven programs need to have things called 'listeners' that wait for
	different events to occur, such as keyboard or mouse inputs. Programs that were
	developed previously have been what's known as synchronus - meaning that all
	the different functions were called in a specified order implemented in the
	design of the program. Event-driven programs (asynchronus), don't proceed in this way. Events
	can happen at any time, and the program then reacts/behaves appropriately.

////////////////////////////////////////////////////////////////////////////////
From the book:

	- An interface (sounds really cool) is a construct that allows you to define
	a set of methods that are shared by a certain subset of classes that may be part
	of a class hierarchy. What this means is that I could implement an 'interface' that
	would include methods that would allow me to define a behavior such as 'fillable' on
	a set of objects for which that makes sense - for instance on circles and squares.
	Other geometric objects (classes), like lines, or arcs, would not make sense to
	have a method that would 'fill' them called on them, since they are one-dimensional,
	and a 'fillable' attribute really only makes sense on something that is 2D or greater.
	- Perhaps a different metaphor (to cement the concept from the book) is a 'bug'
	superclass that included beetles, ants, snails, spiders, and scorpions. Using these
	'classes', one could implement an 'interface' called 'bites' that would have
	methods for dealing with spider bites, ant pites, and scorpion stings...beetles and
	ants being the other 'classes' that don't really need methods for having 'bites'
	since they are peaceful bugs.
////////////////////////////////////////////////////////////////////////////////

Lesson 12: Enumerations, strings, immutable types.

	- Lesson covers the ASCII character set, characters 'a' vs. strings "a" in Java,
	and some specific differences related to reading characters or strings as well as
	calling methods on them or passing messages to them.

Lesson 13: Strings, tokenizers, encryption (simple).

	- Nothing too ground-breaking here, except for the use of the Tokenizer class
	that is included with the Java language...which is really neat and useful for a
	program like the news splicer or gatherer.

Lesson 14: Memory (Heap + Stack), pointers, addresses.

	- This lecture is probably the best single instance of a class that covers what
	is going on with the basic internals of a computer memory system when a program
	is operating. It basically covers a lot of the abstractions that are talked about
	in an assembly language class.

	- Covered in detail what happens with a statement like this:
				Point p1 = new Point(x, y);

		The call of 'new' initially sets aside memory on the heap, the call of the
		constructor Point(x, y) is pushed onto the stack, and then uses the memory
		set aside on the heap to fill in the internal values of any instance variables
		that the calling object requires. Last but not least, this new object's
		address (pointer)/location in memory is returned and assigned (by the '=') to
		the variable p1, which lives on the stack. Hence, the constructors, which have
		no return type, actually return the address of the object which was just
		created on the heap.

Lesson 15: Reading and Writing files.

	- Good review of pointers and references.
	- Covers reading and writing files, as well as objects that support those
	operations. The book, chapter 12.4 does a good job explaining all this as well.
	- Java provides a variety of classes that open and read files; there is also a
	good section about the 'try/catch' block that covers handling exceptions when
	they occur in your program. This is the first introduction I've had to exceptions
	and it is definitely an important part of modern programming. Mehran indicates that
	they are placed in sections of your program where "messy" things can happen:
	such as trying to read a file on disk that isn't there.
	- Exceptions must be 'caught' because they will continue to be passed up the
	stack until there is something that knows how to handle it, and take a new action
	within the program.
	- File access is something that should always be placed inside a 'try/catch'
	block.
	- Any exception stops execution of the current 'try' statement, and then begins
	looking for a catch statement.
	- While 'reading from' a file, you should also encapsulate that in a try/catch,
	just incase something happens while reading the file; the same is true after you
	are done with the file and try to close it...
	- Writing to files occurs in a similar fashion to reading. Same basic pattern.

Lesson 16: Arrays; array lists

	- Syntax for creating arrays: int[] arr = new int[5];
	- How the '++' operator actually works: it's a method that returns a value. It
	can be used either in 'pre' or 'post' fix form.
	- All arrays carry around with them their length (arr.length); it does not have
	the '()' following it as a string variable would, since it's not a method call.
	- Arrays (like objects, unlike primitive types) are passed by reference - meaning
	that if you want to operate on an array (or array elements), you need to pass
	the 'whole' array (i.e. a reference to it).

Lesson 17: Multidimensional arrays and more on array lists.

	- Multidimensional arrays [][]..."arrays of arrays..." int[][] array = new int[2][3];
	- Uses nested for loops to populate with values.
	- Array lists can change their size 'dynamically'. Array lists' actual size and
	effective size are the 'same'...unlike basic arrays whose effective size might be
	less than the actual size (i.e. if you're using less of it than you have allocated).
	- What is a template?
	- ArrayList can ONLY hold objects - not primitive types; hence, the reason for the
	Integer, Character, Double, and Boolean "wrapper" classes.
	- Java 5.0 does the 'boxing' and 'unboxing' work for you behind the scenes, saving
	you from having to call additional methods on objects or primitive types depending
	on which 'way' you were going...
